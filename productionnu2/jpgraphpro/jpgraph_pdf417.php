<?php
 DEFINE('LATCH_TO_ALPHA_FROM_PUNCT',29); DEFINE('LATCH_TO_ALPHA',28); DEFINE('LATCH_TO_LOWER',27); DEFINE('LATCH_TO_MIXED',28); DEFINE('LATCH_TO_PUNCT',25); DEFINE('SHIFT_TO_PUNCT',29); DEFINE('SHIFT_TO_ALPHA',27); DEFINE('LATCH_TC',900); DEFINE('LATCH_NC',902); DEFINE('LATCH_BC_EVEN6',924); DEFINE('LATCH_BC_ODD6',901); DEFINE('PAD_SYMBOL',900); DEFINE('NC_MINDIGITS',13); require_once "pdf417_clusters.inc.php"; require_once "pdf417_compressors.inc.php"; require_once "pdf417_backends.inc.php"; require_once "pdf417_error.inc.php"; class PDF417Barcode { var $iSpec = NULL; var $iSymbols=array(); var $iCnt=0,$iTotCnt=0; var $iRow=0; var $iNumRows,$iNumCols,$iErrLevel; var $iCompLatch = array(LATCH_TC, LATCH_NC, LATCH_BC_EVEN6, LATCH_BC_ODD6); var $iCompressors = NULL, $iRSCode = NULL; var $iOrgData=''; var $iTruncated=false; function PDF417Barcode($aNumCols=10,$aErrLevel=2) { if( $aNumCols < 1 || $aNumCols > 30 ) { JpGraphError::RaiseL(26001); } if( $aErrLevel < 0 || $aErrLevel > 8 ) { JpGraphError::RaiseL(26002); } $this->iNumCols = $aNumCols; $this->iErrLevel = $aErrLevel; $this->iPDF417Patterns = new PDF417Patterns(); $this->iRSCode = new ReedSolomon(); } function SetColumns($aCols) { $this->iNumCols = $aNumCols; } function SetTruncated($aTrunc=true) { $this->iTruncated = $aTrunc; } function SetErrLevel($aErrLevel) { $this->iErrLevel = $aErrLevel; } function PrepData($aData) { $row=0; $i = 0; $len = strlen($aData); $data = array(); while( $i < $len ) { $c=substr($aData,$i,1); if( ctype_digit($c) ) { $j=0; while( ctype_digit(substr($aData,$i+$j,1)) ) ++$j; if( $j >= NC_MINDIGITS ){ if( !empty($data[$row]) ) ++$row; $data[$row++]=array(USE_NC,substr($aData,$i,$j)); } else { if( empty($data[$row]) ) $data[$row] = array(USE_TC,substr($aData,$i,$j)); else $data[$row][1] .= substr($aData,$i,$j); } $i += $j; } elseif( (ord($c) >=32 && ord($c) <= 126 ) || $c == "\n" || $c == "\t" || $c == "\r" ) { if( empty($data[$row]) ) $data[$row] = array(USE_TC,$c); else $data[$row][1] .= $c; ++$i; } else { $remlen = strlen(substr($aData,$i+1)); $cc1 = $cc2 = $cc3 = ''; if( $remlen > 0 ) { $cc1 = substr($aData,$i+1,1); } if( ((ord($cc1) >=32 && ord($cc1) <= 126 ) || $cc1 == "" || $cc1 == "\n" || $cc1 == "\t" || $cc1 == "\r" ) ) { if( empty($data[$row]) ) $data[$row] = array(USE_TC,chr(SHIFT_TO_BC_MARKER).$c); else $data[$row][1] .= chr(SHIFT_TO_BC_MARKER).$c; ++$i; } else { $j=0; $cc = substr($aData,$i,1); $prelen = strlen(substr($aData,$i)); while( $j < $prelen && !( (ord($cc) >=32 && ord($cc) <= 126 ) || $cc == "\n" || $cc == "\t" || $cc == "\r") ) { ++$j; $cc = substr($aData,$i+$j,1); } if( $j <= 2 ) { $cc1 = substr($aData,$i,1); $cc2 = substr($aData,$i+1,1); $t = chr(SHIFT_TO_BC_MARKER).$cc1.chr(SHIFT_TO_BC_MARKER).$cc2; if( empty($data[$row]) ) $data[$row] = array(USE_TC,$t); else $data[$row][1] .= $t; } else { $latch = $j % 6 == 0 ? USE_BC_E6 : USE_BC_O6; if( ! empty($data[$row]) ) { ++$row; } $data[$row++] = array($latch,substr($aData,$i,$j)); } $i += $j; } } } return $data; } function StartRow() { $this->iCnt = 0; $this->iSymbols[$this->iRow][$this->iCnt++] = array('START',NULL,NULL,$this->iPDF417Patterns->GetStartPattern()); $this->iSymbols[$this->iRow][$this->iCnt++] = array('LEFT',NULL,NULL,'?'); if( $this->iRow == 0 ) { $this->iSymbols[$this->iRow][$this->iCnt++] = array('CNT',NULL,NULL,'?'); $this->iTotCnt++; } } function EndRow() { if( $this->iTruncated ) { $this->iSymbols[$this->iRow][$this->iCnt++] = array('TSTOP',NULL,NULL,'1'); } else { $this->iSymbols[$this->iRow][$this->iCnt++] = array('RIGHT',NULL,NULL,'?'); $this->iSymbols[$this->iRow][$this->iCnt++] = array('STOP',NULL,NULL,$this->iPDF417Patterns->GetStopPattern()); } $this->iRow++; } function AddSymbol($aVal,$aVal1='',$aVal2='') { if( empty($this->iSymbols[$this->iRow]) ) { $this->StartRow(); } if( $this->iRow == 0 && $this->iCnt == 3 && $aVal == LATCH_TC ) return; $this->iSymbols[$this->iRow][$this->iCnt++] = array($aVal,$aVal1,$aVal2,$this->iPDF417Patterns->GetPattern($this->iRow,$aVal)); if( $this->iCnt-2 >= $this->iNumCols ) { $this->EndRow(); } $this->iTotCnt++; } function AddPadEndRow() { $padPattern = $this->iPDF417Patterns->GetPattern($this->iRow,PAD_SYMBOL); while( $this->iCnt-2 < $this->iNumCols ) { $this->iSymbols[$this->iRow][$this->iCnt++] = array('PAD',NULL,NULL,$padPattern); $this->iTotCnt++; } $this->EndRow(); } function AddPadSymbols($aN) { for( $i=0; $i < $aN; ++$i ) $this->AddSymbol(PAD_SYMBOL,'PAD'); } function Enc($aDataSpec) { $this->iSymbols=array(); $this->iCnt=-1; $this->iTotCnt=0; $this->iRow=0; if( $this->iCompressors === NULL ) { $bc = new ByteCompressor($this); $this->iCompressors = array(new TextCompressor($this), new NumericCompressor($this), $bc, $bc); } if( is_string($aDataSpec) ) { $aDataSpec = $this->PrepData($aDataSpec); $nrows = count($aDataSpec); } elseif( is_array($aDataSpec) ) $nrows = count($aDataSpec); else { JpGraphError::RaiseL(26003); } for($i=0; $i < $nrows; ++$i ) { $this->AddSymbol($this->iCompLatch[$aDataSpec[$i][0]]); $this->iCompressors[$aDataSpec[$i][0]]->Encode($aDataSpec[$i][1]); } $numcw = $this->iRSCode->GetNumCodewords($this->iErrLevel); $numrows = max(3,ceil(($this->iTotCnt+$numcw)/$this->iNumCols)); $numpads = $numrows*$this->iNumCols-$numcw-$this->iTotCnt; if( $numcw + $this->iTotCnt > 925 || $numrows > 90) { JpGraphError::RaiseL(26004,$this->iErrLevel,$this->iNumCols); } $this->AddPadSymbols($numpads); $this->iSymbols[0][2][0] = $this->iTotCnt; $this->iSymbols[0][2][1] = 'CNT'; $this->iSymbols[0][2][3] = $this->iPDF417Patterns->GetPattern(0,$this->iTotCnt); $data=array();$dcnt=0; for( $i=0; $i < $this->iRow; ++$i ) { for($j=2; $j < $this->iNumCols+2; ++$j) { $data[$dcnt++] = $this->iSymbols[$i][$j][0]; } } if( !empty($this->iSymbols[$this->iRow]) ) { $ncols = count($this->iSymbols[$this->iRow]); for($j=2; $j < $ncols; ++$j) { $data[$dcnt++] = $this->iSymbols[$this->iRow][$j][0]; } } $cw = $this->iRSCode->GetCodewords($data,$this->iErrLevel); for( $i=0; $i < $numcw; ++$i ) { $this->AddSymbol($cw[$i],"cw$i"); } for($i=0; $i < $this->iRow; ++$i) { list( $left, $right ) = $this->iPDF417Patterns->GetRowInd($i,$numrows,$this->iNumCols,$this->iErrLevel); $this->iSymbols[$i][1] = array('LEFT',NULL,$left,$this->iPDF417Patterns->GetPattern($i,$left)); if( !$this->iTruncated ) { $this->iSymbols[$i][$this->iNumCols+2] = array('RIGHT',NULL,$right,$this->iPDF417Patterns->GetPattern($i,$right)); } } $spec = new BarcodePrintSpec(); $spec->iBar = $this->iSymbols; $spec->iInfo = "ErrorLevel=".$this->iErrLevel.":NumRows=".$this->iNumRows.":NumCols=".$this->iNumCols; $spec->iEncoding='PDF417'; $spec->iData=$data; $spec->iStrokeDataBelow=true; return $spec; } } ?>