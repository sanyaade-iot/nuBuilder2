<?php
 DEFINE('WINDROSE_TYPE4',1); DEFINE('WINDROSE_TYPE8',2); DEFINE('WINDROSE_TYPE16',3); DEFINE('WINDROSE_TYPEFREE',4); DEFINE('LBLALIGN_CENTER',1); DEFINE('LBLALIGN_TOP',2); DEFINE('LBLPOSITION_CENTER',1); DEFINE('LBLPOSITION_EDGE',2); DEFINE('KEYENCODING_CLOCKWISE',1); DEFINE('KEYENCODING_ANTICLOCKWISE',2); DEFINE('__DEBUG',false); class WindrosePlotScale { var $iMax,$iDelta=5; var $iNumCirc=3; var $iMaxNum=0; var $iLblFmt='%.0f%%'; var $iFontFamily=FF_VERDANA,$iFontStyle=FS_NORMAL,$iFontSize=10; var $iZFontFamily=FF_ARIAL,$iZFontStyle=FS_NORMAL,$iZFontSize=10; var $iFontColor='black',$iZFontColor='black'; var $iFontFrameColor=false, $iFontBkgColor=false; var $iLblZeroTxt=null; var $iLblAlign=LBLALIGN_CENTER; var $iAngle='auto'; var $iManualScale = false; var $iHideLabels = false; function WindrosePlotScale($aData) { $max=0; $totlegsum = 0; $maxnum=0; $this->iZeroSum=0; foreach( $aData as $idx => $legdata ) { $legsum = array_sum($legdata); $maxnum = max($maxnum,count($legdata)-1); $max = max($legsum-$legdata[0],$max); $totlegsum += $legsum; $this->iZeroSum += $legdata[0] ; } if( round($totlegsum) > 100 ) { JpGraphError::RaiseL(22001,$legsum); } $this->iMax = $max ; $this->iMaxNum = $maxnum; $this->iNumCirc = $this->GetNumCirc(); $this->iMaxVal = $this->iNumCirc * $this->iDelta ; } function GetNumCirc() { $num = ceil($this->iMax / $this->iDelta); return max(1,$num) ; } function SetMaxValue($aMax) { $this->iMax = $aMax; $this->iNumCirc = $this->GetNumCirc(); $this->iMaxVal = $this->iNumCirc * $this->iDelta ; } function Set($aMax,$aDelta=null) { if( $aDelta==null ) { $this->SetMaxValue($aMax); return; } $this->iDelta = $aDelta; $this->iNumCirc = ceil($aMax/$aDelta); $this->iMaxVal = $this->iNumCirc * $this->iDelta ; $this->iMax=$aMax; $this->iManualScale = true; } function AutoScale($aRadius,$aMinDist=30) { if( $this->iManualScale ) return; $tst = ceil($aRadius / $this->iNumCirc) ; while( $tst <= $aMinDist && $this->iDelta < 100 ) { $this->iDelta += 5; $tst = ceil($aRadius / $this->GetNumCirc()) ; } if( $this->iDelta >= 100 ) { JpGraphError::RaiseL(22002); } if( $tst > $aMinDist * 3 ) { $this->iDelta = 2; $tst = ceil($aRadius / $this->iNumCirc) ; while( $tst <= $aMinDist && $this->iDelta < 100 ) { $this->iDelta += 2; $tst = ceil($aRadius / $this->GetNumCirc()) ; } if( $this->iDelta >= 100 ) { JpGraphError::RaiseL(22002); } } $this->iNumCirc = $this->GetNumCirc(); $this->iMaxVal = $this->iNumCirc * $this->iDelta ; } function GetMax() { return $this->iMax; } function Hide($aFlg=true) { $this->iHideLabels = $aFlg; } function SetAngle($aAngle) { $this->iAngle = $aAngle ; } function RelTranslate($aVal,$r,$ri) { $tv = round($aVal/$this->iMaxVal*($r-$ri)); return $tv ; } function SetLabelAlign($aAlign) { $this->iLblAlign = $aAlign ; } function SetLabelFormat($aFmt) { $this->iLblFmt = $aFmt ; } function SetLabelFillColor($aBkgColor,$aBorderColor=false) { $this->iFontBkgColor = $aBkgColor; if( $aBorderColor === false ) { $this->iFontFrameColor = $aBkgColor; } else { $this->iFontFrameColor = $aBorderColor; } } function SetFontColor($aColor) { $this->iFontColor = $aColor ; $this->iZFontColor = $aColor ; } function SetFont($aFontFamily,$aFontStyle=FS_NORMAL,$aFontSize=10) { $this->iFontFamily = $aFontFamily ; $this->iFontStyle = $aFontStyle ; $this->iFontSize = $aFontSize ; $this->SetZFont($aFontFamily,$aFontStyle,$aFontSize); } function SetZFont($aFontFamily,$aFontStyle=FS_NORMAL,$aFontSize=10) { $this->iZFontFamily = $aFontFamily ; $this->iZFontStyle = $aFontStyle ; $this->iZFontSize = $aFontSize ; } function SetZeroLabel($aTxt) { $this->iLblZeroTxt = $aTxt ; } function SetZFontColor($aColor) { $this->iZFontColor = $aColor ; } function StrokeLabels(&$aImg,$xc,$yc,$ri,$rr) { if( $this->iHideLabels ) return; $a = $this->iAngle * M_PI/180.0; $n = $this->iNumCirc; $d = $this->iDelta; $val = new Text(); $val->SetFont($this->iFontFamily,$this->iFontStyle,$this->iFontSize); $val->SetColor($this->iFontColor); if( $this->iFontBkgColor !== false ) { $val->SetBox($this->iFontBkgColor,$this->iFontFrameColor); } if( $this->iLblAlign == LBLALIGN_TOP ) { if( $a > 0 && $a <= M_PI/2 ) $val->SetAlign('left','bottom'); elseif( $a > M_PI/2 && $a <= M_PI ) $val->SetAlign('right','bottom'); } elseif( $this->iLblAlign == LBLALIGN_CENTER ) { $val->SetAlign('center','center'); } $v = $d ; $si = sin($a); $co = cos($a); for( $i=0; $i < $n; ++$i, $v += $d ) { $r = $ri + ($i+1) * $rr; $x = $xc + $co * $r; $y = $yc - $si * $r; $val->Set(sprintf($this->iLblFmt,$v)); $val->Stroke($aImg,$x,$y); } if( $this->iLblZeroTxt === null ) { $this->iLblZeroTxt = sprintf($this->iLblFmt,$this->iZeroSum); } else { $this->iLblZeroTxt = sprintf($this->iLblZeroTxt,$this->iZeroSum); } $val->Set($this->iLblZeroTxt); $val->SetAlign('center','center'); $val->SetParagraphAlign('center'); $val->SetColor($this->iZFontColor); $val->SetFont($this->iZFontFamily,$this->iZFontStyle,$this->iZFontSize); $val->Stroke($aImg,$xc,$yc); } } class LegendStyle { var $iLength = 40, $iMargin = 20 , $iBottomMargin=5; var $iCircleWeight=2, $iCircleRadius = 18, $iCircleColor='black'; var $iTxtFontFamily=FF_VERDANA,$iTxtFontStyle=FS_NORMAL,$iTxtFontSize=8; var $iLblFontFamily=FF_VERDANA,$iLblFontStyle=FS_NORMAL,$iLblFontSize=8; var $iCircleFontFamily=FF_VERDANA,$iCircleFontStyle=FS_NORMAL,$iCircleFontSize=8; var $iLblFontColor='black',$iTxtFontColor='black',$iCircleFontColor='black'; var $iShow=true; var $iFormatString='%.1f'; var $iTxtMargin=6, $iTxt=''; var $iZCircleTxt='Calm'; function SetFont($aFontFamily,$aFontStyle=FS_NORMAL,$aFontSize=10) { $this->iLblFontFamily = $aFontFamily ; $this->iLblFontStyle = $aFontStyle ; $this->iLblFontSize = $aFontSize ; $this->iTxtFontFamily = $aFontFamily ; $this->iTxtFontStyle = $aFontStyle ; $this->iTxtFontSize = $aFontSize ; $this->iCircleFontFamily = $aFontFamily ; $this->iCircleFontStyle = $aFontStyle ; $this->iCircleFontSize = $aFontSize ; } function SetLFont($aFontFamily,$aFontStyle=FS_NORMAL,$aFontSize=10) { $this->iLblFontFamily = $aFontFamily ; $this->iLblFontStyle = $aFontStyle ; $this->iLblFontSize = $aFontSize ; } function SetTFont($aFontFamily,$aFontStyle=FS_NORMAL,$aFontSize=10) { $this->iTxtFontFamily = $aFontFamily ; $this->iTxtFontStyle = $aFontStyle ; $this->iTxtFontSize = $aFontSize ; } function SetCFont($aFontFamily,$aFontStyle=FS_NORMAL,$aFontSize=10) { $this->iCircleFontFamily = $aFontFamily ; $this->iCircleFontStyle = $aFontStyle ; $this->iCircleFontSize = $aFontSize ; } function SetFontColor($aColor) { $this->iTxtFontColor = $aColor ; $this->iLblFontColor = $aColor ; $this->iCircleFontColor = $aColor ; } function SetTFontColor($aColor) { $this->iTxtFontColor = $aColor ; } function SetLFontColor($aColor) { $this->iLblFontColor = $aColor ; } function SetCFontColor($aColor) { $this->iCircleFontColor = $aColor ; } function SetCircleWeight($aWeight) { $this->iCircleWeight = $aWeight; } function SetCircleRadius($aRadius) { $this->iCircleRadius = $aRadius; } function SetCircleColor($aColor) { $this->iCircleColor = $aColor ; } function SetCircleText($aTxt) { $this->iZCircleTxt = $aTxt; } function SetMargin($aMarg,$aBottomMargin=5) { $this->iMargin=$aMarg; $this->iBottomMargin=$aBottomMargin; } function SetLength($aLength) { $this->iLength = $aLength ; } function Show($aFlg=true) { $this->iShow = $aFlg; } function Hide($aFlg=true) { $this->iShow = ! $aFlg; } function SetFormat($aFmt) { $this->iFormatString=$aFmt; } function SetText($aTxt) { $this->iTxt = $aTxt ; } } DEFINE('RANGE_OVERLAPPING',0); DEFINE('RANGE_DISCRETE',1); class WindrosePlot { var $iAntiAlias=false; var $iData=array(); var $iX=0.5,$iY=0.5; var $iSize=0.55; var $iGridColor1='gray',$iGridColor2='darkgreen'; var $iRadialColorArray=array(); var $iRadialWeightArray=array(); var $iRadialStyleArray=array(); var $iRanges = array(1,2,3,5,6,10,13.5,99.0); var $iRangeStyle = RANGE_OVERLAPPING ; var $iCenterSize=60; var $iType = WINDROSE_TYPE16; var $iFontFamily=FF_VERDANA,$iFontStyle=FS_NORMAL,$iFontSize=10; var $iFontColor='darkgray'; var $iRadialGridStyle='longdashed'; var $iCircleGridStyle='solid'; var $iAllDirectionLabels = array('E','ENE','NE','NNE','N','NNW','NW','WNW','W','WSW','SW','SSW','S','SSE','SE','ESE'); var $iStandardDirections = array(); var $iCircGridWeight=3, $iRadialGridWeight=1; var $iLabelMargin=35; var $iLegweights = array(2,4,6,8,10,12,14,16,18,20); var $iLegColors = array('orange','black','blue','red','green','purple','navy','yellow','brown'); var $iLabelFormatString='%.1f°', $iLabels=array(); var $iLabelPositioning = LBLPOSITION_EDGE; var $legend=null; var $iColor='white'; var $iShowBox=false, $iBoxColor='black',$iBoxWeight=1; var $iOrdinalEncoding=KEYENCODING_ANTICLOCKWISE; function WindrosePlot($aData) { $this->iData = $aData; $this->legend = new LegendStyle(); $this->scale = new WindrosePlotScale($this->iData); $delta = 2*M_PI/16; for( $i=0, $a=0; $i < 16; ++$i, $a += $delta ) $this->iStandardDirections[$this->iAllDirectionLabels[$i]] = $a; } function SetSize($aSize) { $this->iSize = $aSize; } function SetDataKeyEncoding($aEncoding) { $this->iOrdinalEncoding = $aEncoding; } function SetColor($aColor) { $this->iColor = $aColor; } function SetRadialColors($aColors) { $this->iRadialColorArray = $aColors; } function SetRadialWeights($aWeights) { $this->iRadialWeightArray = $aWeights; } function SetRadialStyles($aStyles) { $this->iRadialStyleArray = $aStyles; } function SetBox($aColor='black',$aWeight=1,$aShow=true) { $this->iShowBox = $aShow ; $this->iBoxColor = $aColor ; $this->iBoxWeight = $aWeight ; } function SetLabels($aLabels) { $this->iLabels = $aLabels ; } function SetLabelMargin($aMarg) { $this->iLabelMargin = $aMarg ; } function SetLabelFormat($aLblFormat) { $this->iLabelFormatString = $aLblFormat ; } function SetCompassLabels($aLabels) { if( count($aLabels) != 16 ) { JpgraphError::RaiseL(22004); } $this->iAllDirectionLabels = $aLabels ; $delta = 2*M_PI/16; for( $i=0, $a=0; $i < 16; ++$i, $a += $delta ) $this->iStandardDirections[$this->iAllDirectionLabels[$i]] = $a; } function SetCenterSize($aSize) { $this->iCenterSize = $aSize; } function SetZCircleSize($aSize) { $this->iCenterSize = $aSize; } function SetFont($aFFam,$aFStyle=FS_NORMAL,$aFSize=10) { $this->iFontFamily = $aFFam ; $this->iFontStyle = $aFStyle ; $this->iFontSize = $aFSize ; } function SetFontColor($aColor) { $this->iFontColor=$aColor; } function SetGridColor($aColor1,$aColor2) { $this->iGridColor1 = $aColor1; $this->iGridColor2 = $aColor2; } function SetGridWeight($aGrid1=1,$aGrid2=2) { $this->iCircGridWeight = $aGrid1 ; $this->iRadialGridWeight = $aGrid2 ; } function SetRadialGridStyle($aStyle) { $aStyle = strtolower($aStyle); if( !in_array($aStyle,array('solid','dotted','dashed','longdashed')) ) { JpGraphError::RaiseL(22005); } $this->iRadialGridStyle=$aStyle; } function SetRanges($aRanges) { $this->iRanges = $aRanges; } function SetRangeStyle($aStyle) { $this->iRangeStyle = $aStyle; } function SetRangeColors($aLegColors) { $this->iLegColors = $aLegColors; } function SetRangeWeights($aWeights) { $n=count($aWeights); for($i=0; $i< $n; ++$i ) { $aWeights[$i] = floor($aWeights[$i]/2); } $this->iLegweights = $aWeights; } function SetType($aType) { if( $aType < WINDROSE_TYPE4 || $aType > WINDROSE_TYPEFREE ) { JpGraphError::RaiseL(22006); } $this->iType = $aType; } function SetPos($aX,$aY) { $this->iX = $aX; $this->iY = $aY; } function SetAntiAlias($aFlag) { $this->iAntiAlias = $aFlag ; if( ! $aFlag ) $this->iCircGridWeight = 1; } function _ThickCircle(&$aImg,$aXC,$aYC,$aRad,$aWeight=2,$aColor) { $aImg->SetColor($aColor); $aRad *= 2 ; $aImg->Ellipse($aXC,$aYC,$aRad,$aRad); if( $aWeight > 1 ) { $aImg->Ellipse($aXC,$aYC,$aRad+1,$aRad+1); $aImg->Ellipse($aXC,$aYC,$aRad+2,$aRad+2); if( $aWeight > 2 ) { $aImg->Ellipse($aXC,$aYC,$aRad+3,$aRad+3); $aImg->Ellipse($aXC,$aYC,$aRad+3,$aRad+4); $aImg->Ellipse($aXC,$aYC,$aRad+4,$aRad+3); } } } function _StrokeWindLeg(&$aImg,$xc,$yc,$a,$ri,$r,$weight,$color) { if( $r < 1 ) return; $xt = $xc + cos($a)*$ri; $yt = $yc - sin($a)*$ri; $xxt = $xc + cos($a)*($ri+$r); $yyt = $yc - sin($a)*($ri+$r); $x1 = $xt - $weight*sin($a); $y1 = $yt - $weight*cos($a); $x2 = $xxt - $weight*sin($a); $y2 = $yyt - $weight*cos($a); $x3 = $xxt + $weight*sin($a); $y3 = $yyt + $weight*cos($a); $x4 = $xt + $weight*sin($a); $y4 = $yt + $weight*cos($a); $pts = array($x1,$y1,$x2,$y2,$x3,$y3,$x4,$y4); $aImg->SetColor($color); $aImg->FilledPolygon($pts); } function Legend($aGraph) { } function _StrokeLegend(&$aImg,$x,$y,$scaling=1,$aReturnWidth=false) { if( ! $this->legend->iShow ) return; $nlc = count($this->iLegColors); $nlw = count($this->iLegweights); $value = new Text(); $value->SetAlign('center','bottom'); $value->SetFont($this->legend->iLblFontFamily, $this->legend->iLblFontStyle, $this->legend->iLblFontSize*$scaling); $value->SetColor($this->legend->iLblFontColor); $xcenter = $x ; $fmt = $this->legend->iFormatString.'-'.$this->legend->iFormatString; $tst = sprintf($fmt,$this->iRanges[0],$this->iRanges[1]); $value->Set($tst); $w = $value->GetWidth($aImg); $l = round(max($this->legend->iLength * $scaling,$w*1.5)); $r = $this->legend->iCircleRadius * $scaling ; $len = 2*$r + $this->scale->iMaxNum * $l; if( $aReturnWidth ) return $len; $x -= round($len/2); $x += $r; $y -= ($this->legend->iCircleRadius + 2)*$scaling+$this->legend->iBottomMargin*$scaling; if( $this->legend->iTxt != '' ) { $value->Set($this->legend->iTxt); $y -= $value->GetHeight($aImg); } $this->_ThickCircle($aImg,$x,$y,$r,$this->legend->iCircleWeight, $this->legend->iCircleColor); $xc=$x; $yc=$y; $value->SetAlign('center','bottom'); $x += $r+1; $txty = $y - round($this->iLegweights[($this->scale->iMaxNum-1)%$nlw]*$scaling) - 4*$scaling; if( $this->scale->iMaxNum >= count($this->iRanges) ) { JpGraphError::RaiseL(22007); } $i=0;$idx=0; while( $i < $this->scale->iMaxNum ) { $y1 = $y - round($this->iLegweights[$i % $nlw]*$scaling); $y2 = $y + round($this->iLegweights[$i % $nlw]*$scaling); $x2 = $x + $l ; $aImg->SetColor($this->iLegColors[$i % $nlc]); $aImg->FilledRectangle($x,$y1,$x2,$y2); if( $this->iRangeStyle == RANGE_OVERLAPPING ) { $lbl = sprintf($fmt,$this->iRanges[$idx],$this->iRanges[$idx+1]); } else { $lbl = sprintf($fmt,$this->iRanges[$idx],$this->iRanges[$idx+1]); ++$idx; } $value->Set($lbl); $value->Stroke($aImg,$x+$l/2,$txty); $x = $x2; ++$i;++$idx; } $value->SetFont($this->legend->iCircleFontFamily, $this->legend->iCircleFontStyle, $this->legend->iCircleFontSize*$scaling); $value->SetColor($this->legend->iCircleFontColor); $value->Set($this->legend->iZCircleTxt); $value->SetAlign('center','center'); $value->ParagraphAlign('center'); $value->Stroke($aImg,$xc,$yc); $value->SetFont($this->legend->iTxtFontFamily, $this->legend->iTxtFontStyle, $this->legend->iTxtFontSize*$scaling); $value->SetColor($this->legend->iTxtFontColor); $value->Set($this->legend->iTxt); $value->SetAlign('center','top'); $value->SetParagraphAlign('center'); $value->Stroke($aImg,$xcenter,$y2+$this->legend->iTxtMargin*$scaling); } function SetAutoScaleAngle($aIsRegRose=true) { if( is_numeric($this->scale->iAngle) ) return; if( $aIsRegRose ) { for( $i=0; $i < 16; ++$i ) { $dtxt = $this->iAllDirectionLabels[$i]; if( !empty($this->iData[$dtxt]) ) { $data[$i] = $this->iData[$dtxt]; } elseif( !empty($this->iData[strtolower($dtxt)]) ) { $data[$i] = $this->iData[strtolower($dtxt)]; } elseif( !empty($this->iData[$i]) ) { $data[$i] = $this->iData[$i]; } else { $data[$i] = array(); } } $c0 = array_sum($data[0]); $c1 = array_sum($data[1]); $found = 1; $min = $c0+$c1*100; for( $i=1; $i < 15; ++$i ) { $c2 = array_sum($data[$i+1]); $w = $c0 + 3*$c1 + $c2 ; if( $w < $min ) { $min = $w; $found = $i; } $c0 = $c1; $c1 = $c2; } $this->scale->iAngle = $found*22.5; } else { $n = count($this->iData); foreach( $this->iData as $dir => $leg ) { if( !is_numeric($dir) ) { $pos = array_search(strtoupper($dir),$this->iAllDirectionLabels); if( $pos !== false ) { $dir = $pos*22.5; } } $data[round($dir)] = $leg; } $keys = array_keys($data); sort($keys, SORT_NUMERIC); $n = count($data); $found = false; $max = 0 ; for( $i=0; $i < 15; ++$i ) { $try_a = round(22.5*$i); if( $try_a > $keys[$n-1] ) break; if( in_array($try_a,$keys) ) continue; $j=0; while( $j < $n && $keys[$j] <= $try_a ) ++$j; if( $j == 0 ) { $kj = 0; $keys[$n-1]; $d1 = 0; abs($kj-$try_a); } else { --$j; $kj = $keys[$j]; $d1 = abs($kj-$try_a); } $l=$n-1; while( $l >= 0 && $keys[$l] >= $try_a ) --$l; if( $l == $n-1) { $kl = $keys[0]; $d2 = abs($kl-$try_a); } else { ++$l; $kl = $keys[$l]; $d2 = abs($kl-$try_a); } $w = $d1 + $d2; if( $i == 0 ) { $w = round(1.4 * $w); } $diff = abs($d1 - $d2); $w *= (360-$diff); if( $w > $max ) { $found = $i; $max = $w; } } $a = $found*22.5; if( $keys[$n-1] < 25 ) $a = 45; elseif( $keys[0] > 60 ) $a = 45; elseif( $keys[0] > 25 && $keys[$n-1] < 340 ) $a = 0; elseif( $keys[$n-1] < 75 ) $a = 90; elseif( $keys[$n-1] < 120 ) $a = 135; elseif( $keys[$n-1] < 160 ) $a = 180; $this->scale->iAngle = $a ; } } function NormAngle($a) { while( $a > 360 ) $a -= 360; return $a; } function SetLabelPosition($aPos) { $this->iLabelPositioning = $aPos ; } function _StrokeFreeRose(&$dblImg,&$value,$scaling,$xc,$yc,$r,$ri) { if( $this->iType != WINDROSE_TYPEFREE ) { JpGraphError::RaiseL(22008); } $this->SetAutoScaleAngle(false); $nlc = count($this->iLegColors); $nlw = count($this->iLegweights); $txtpos=array(); $num = count($this->iData); $keys = array_keys($this->iData); foreach( $this->iData as $dir => $legdata ) { if( in_array($dir,$this->iAllDirectionLabels,true) === true) { $a = $this->iStandardDirections[strtoupper($dir)]; if( in_array($a*180/M_PI,$keys) ) { JpGraphError::RaiseL(22009,round($a*180/M_PI)); } } elseif( is_numeric($dir) ) { $this->NormAngle($dir); $a = $dir * M_PI/180; } else { JpGraphError::RaiseL(22010); } $xxc = round($xc + cos($a)*$ri); $yyc = round($yc - sin($a)*$ri); $x = round($xc + cos($a)*$r); $y = round($yc - sin($a)*$r); if( empty($this->iRadialColorArray[$dir]) ) $dblImg->SetColor($this->iGridColor2); else $dblImg->SetColor($this->iRadialColorArray[$dir]); if( empty($this->iRadialWeightArray[$dir]) ) $dblImg->SetLineWeight($this->iRadialGridWeight); else $dblImg->SetLineWeight($this->iRadialWeightArray[$dir]); if( empty($this->iRadialStyleArray[$dir]) ) $dblImg->SetLineStyle($this->iRadialGridStyle); else $dblImg->SetLineStyle($this->iRadialStyleArray[$dir]); $dblImg->StyleLine($xxc,$yyc,$x,$y); $txtpos[] = array($x,$y,$a); } $dblImg->SetLineWeight(1); $lr = $scaling * $this->iLabelMargin; if( $this->iLabelPositioning == LBLPOSITION_EDGE ) { $value->SetAlign('left','top'); } else { $value->SetAlign('center','center'); $value->SetMargin(0); } for($i=0; $i < $num; ++$i ) { list($x,$y,$a) = $txtpos[$i]; $da = floor($a*180/M_PI); if( !empty($this->iLabels[$keys[$i]]) ) { $lbl = $this->iLabels[$keys[$i]]; } else { $lbl = sprintf($this->iLabelFormatString,$a*180/M_PI); } if( $this->iLabelPositioning == LBLPOSITION_CENTER ) { $dx = $dy = 0; } else { if( $a>=7*M_PI/4 || $a <= M_PI/4 ) $dx=0; if( $a>=M_PI/4 && $a <= 3*M_PI/4 ) $dx=($a-M_PI/4)*2/M_PI; if( $a>=3*M_PI/4 && $a <= 5*M_PI/4 ) $dx=1; if( $a>=5*M_PI/4 && $a <= 7*M_PI/4 ) $dx=(1-($a-M_PI*5/4)*2/M_PI); if( $a>=7*M_PI/4 ) $dy=(($a-M_PI)-3*M_PI/4)*2/M_PI; if( $a<=M_PI/4 ) $dy=(0.5+$a*2/M_PI); if( $a>=M_PI/4 && $a <= 3*M_PI/4 ) $dy=1; if( $a>=3*M_PI/4 && $a <= 5*M_PI/4 ) $dy=(1-($a-3*M_PI/4)*2/M_PI); if( $a>=5*M_PI/4 && $a <= 7*M_PI/4 ) $dy=0; } $value->Set($lbl); $th = $value->GetHeight($dblImg); $tw = $value->GetWidth($dblImg); $xt=round($lr*cos($a)+$x) - $dx*$tw; $yt=round($y-$lr*sin($a)) - $dy*$th; $value->Stroke($dblImg,$xt,$yt); } if( __DEBUG ) { $dblImg->SetColor("red"); $dblImg->Circle($xc,$yc,$lr+$r); } reset($this->iData); $i=0; foreach($this->iData as $dir => $legdata) { $legdata = array_slice($legdata,1); $nn = count($legdata); $a = $txtpos[$i][2]; $rri = $ri/$scaling; for( $j=0; $j < $nn; ++$j ) { $legr = $this->scale->RelTranslate($legdata[$j],$r/$scaling,$ri/$scaling) ; $this->_StrokeWindLeg($dblImg, $xc, $yc, $a, $rri *$scaling, $legr *$scaling, $this->iLegweights[$j % $nlw] * $scaling, $this->iLegColors[$j % $nlc]); $rri += $legr; } ++$i; } } function FixupIndexes($aDataArray,$num) { $ret = array(); $keys = array_keys($aDataArray); foreach($aDataArray as $idx => $data) { if( is_string($idx) ) { $idx = strtoupper($idx); $res = array_search($idx,$this->iAllDirectionLabels); if( $res === false ) { JpGraphError::RaiseL(22011,$idx); } $idx = $res; if( $idx % (16 / $num) !== 0 ) { JpGraphError::RaiseL(22012); } $idx /= (16/$num) ; if( in_array($idx,$keys,1) ) { JpgraphError::RaiseL(22013,$idx); } } if( $idx < 0 || $idx > 15 ) { JpgraphError::RaiseL(22014); } $ret[$idx] = $data; } return $ret; } function _StrokeRegularRose(&$dblImg,&$value,$scaling,$xc,$yc,$r,$ri) { if( $this->iType == WINDROSE_TYPE4 ) $num = 4; elseif( $this->iType == WINDROSE_TYPE8 ) $num = 8; elseif( $this->iType == WINDROSE_TYPE16 ) $num = 16; else { JpGraphError::RaiseL(22015); } $this->SetAutoScaleAngle(true); $nlc = count($this->iLegColors); $nlw = count($this->iLegweights); $this->iRadialColorArray = $this->FixupIndexes($this->iRadialColorArray,$num); $this->iRadialWeightArray = $this->FixupIndexes($this->iRadialWeightArray,$num); $this->iRadialStyleArray = $this->FixupIndexes($this->iRadialStyleArray,$num); $txtpos=array(); $a = 2*M_PI/$num; $dblImg->SetColor($this->iGridColor2); $dblImg->SetLineStyle($this->iRadialGridStyle); $dblImg->SetLineWeight($this->iRadialGridWeight); for($i=0; $i < $num; ++$i ) { $xxc = round($xc + cos($a*$i)*$ri); $yyc = round($yc - sin($a*$i)*$ri); $x = round($xc + cos($a*$i)*$r); $y = round($yc - sin($a*$i)*$r); if( empty($this->iRadialColorArray[$i]) ) $dblImg->SetColor($this->iGridColor2); else $dblImg->SetColor($this->iRadialColorArray[$i]); if( empty($this->iRadialWeightArray[$i]) ) $dblImg->SetLineWeight($this->iRadialGridWeight); else $dblImg->SetLineWeight($this->iRadialWeightArray[$i]); if( empty($this->iRadialStyleArray[$i]) ) $dblImg->SetLineStyle($this->iRadialGridStyle); else $dblImg->SetLineStyle($this->iRadialStyleArray[$i]); $dblImg->StyleLine($xxc,$yyc,$x,$y); $txtpos[] = array($x,$y,$a*$i); } $dblImg->SetLineWeight(1); $lr = $scaling * $this->iLabelMargin; if( $this->iLabelPositioning == LBLPOSITION_CENTER ) { $value->SetAlign('center','center'); } else { $value->SetAlign('left','top'); $value->SetMargin(0); $lr /= 2 ; } for($i=0; $i < $num; ++$i ) { list($x,$y,$a) = $txtpos[$i]; if( $this->iLabelPositioning == LBLPOSITION_CENTER ) { $dx = $dy = 0; } else { if( $a>=7*M_PI/4 || $a <= M_PI/4 ) $dx=0; if( $a>=M_PI/4 && $a <= 3*M_PI/4 ) $dx=($a-M_PI/4)*2/M_PI; if( $a>=3*M_PI/4 && $a <= 5*M_PI/4 ) $dx=1; if( $a>=5*M_PI/4 && $a <= 7*M_PI/4 ) $dx=(1-($a-M_PI*5/4)*2/M_PI); if( $a>=7*M_PI/4 ) $dy=(($a-M_PI)-3*M_PI/4)*2/M_PI; if( $a<=M_PI/4 ) $dy=(0.5+$a*2/M_PI); if( $a>=M_PI/4 && $a <= 3*M_PI/4 ) $dy=1; if( $a>=3*M_PI/4 && $a <= 5*M_PI/4 ) $dy=(1-($a-3*M_PI/4)*2/M_PI); if( $a>=5*M_PI/4 && $a <= 7*M_PI/4 ) $dy=0; } $value->Set($this->iAllDirectionLabels[$i*(16/$num)]); $th = $value->GetHeight($dblImg); $tw = $value->GetWidth($dblImg); $xt=round($lr*cos($a)+$x) - $dx*$tw; $yt=round($y-$lr*sin($a)) - $dy*$th; $value->Stroke($dblImg,$xt,$yt); } if( __DEBUG ) { $dblImg->SetColor("red"); $dblImg->Circle($xc,$yc,$lr+$r); } reset($this->iData); $keys = array_keys($this->iData); foreach($this->iData as $idx => $legdata) { $legdata = array_slice($legdata,1); $nn = count($legdata); if( is_string($idx) ) { $idx = strtoupper($idx); $idx = array_search($idx,$this->iAllDirectionLabels); if( $idx === false ) { JpGraphError::RaiseL(22016); } if( $idx % (16 / $num) !== 0 ) { JpGraphError::RaiseL(22017); } $idx /= (16/$num) ; if( in_array($idx,$keys,1) ) { JpgraphError::RaiseL(22018,$idx); } } if( $idx < 0 || $idx > 15 ) { JpgraphError::RaiseL(22019); } $a = $idx * (360 / $num) ; $a *= M_PI/180.0; $rri = $ri/$scaling; for( $j=0; $j < $nn; ++$j ) { $legr = $this->scale->RelTranslate($legdata[$j], $r/$scaling,$ri/$scaling) ; $this->_StrokeWindLeg($dblImg, $xc, $yc, $a, $rri *$scaling, $legr *$scaling, $this->iLegweights[$j % $nlw] * $scaling, $this->iLegColors[$j % $nlc]); $rri += $legr; } } } function Stroke(&$aImg) { $scaling = $this->iAntiAlias ? 2 : 1 ; $value = new Text(); $value->SetFont($this->iFontFamily,$this->iFontStyle,$this->iFontSize*$scaling); $value->SetColor($this->iFontColor); $n = count($this->iLabels); if( $n > 0 ) { $maxh=0;$maxw=0; foreach($this->iLabels as $key => $lbl) { $value->Set($lbl); $maxh = max($maxh,$value->GetHeight($aImg)); $maxw = max($maxw,$value->GetWidth($aImg)/2); } } else { $value->Set("180.8"); $maxh = $value->GetHeight($aImg); $maxw = $value->GetWidth($aImg); } $maxh += round($this->iFontSize*$scaling * 0.5) ; $maxw += round($this->iFontSize*$scaling * 0.5) ; $valxmarg = 2*$maxw+2*$this->iLabelMargin*$scaling; $valymarg = 2*$maxh+2*$this->iLabelMargin*$scaling; $w = round($this->iSize*$scaling + $valxmarg); $legendwidth = $this->_StrokeLegend($aImg,0,0,$scaling,true)+10*$scaling; $w = max($w,$legendwidth); $legendheight = round($this->legend->iShow ? 1 : 0); $legendheight *= max($this->legend->iCircleRadius*2,$this->legend->iTxtFontSize*2)+ $this->legend->iMargin + $this->legend->iBottomMargin + 2; $legendheight *= $scaling; $h = round($this->iSize*$scaling + $valymarg) + $legendheight ; if( $this->iAntiAlias ) { $dblImg = new Image($w,$h); $dblImg->SetColor($this->iColor); $dblImg->FilledRectangle(0,0,$w,$h); } else { $dblImg = &$aImg ; $dblImg->SetTranslation($this->iX-$w/2, $this->iY-$h/2); } if( __DEBUG ) { $dblImg->SetColor('red'); $dblImg->Rectangle(0,0,$w-1,$h-1); } $dblImg->SetColor('black'); if( $this->iShowBox ) { $dblImg->SetColor($this->iBoxColor); $dblImg->SetLineWeight($this->iBoxWeight); $dblImg->Rectangle(0,0,$w-1,$h-1); $dblImg->SetLineWeight(1); } $xc = round($w/2); $yc = round(($h-$legendheight)/2); $this->iSize *= $scaling; $ri = $this->iCenterSize/2 ; $r = round( $this->iSize/2 ); $n = $this->scale->GetNumCirc(); $ri *= $scaling ; $rr = round(($r-$ri)/$n); for( $i = 1; $i <= $n; ++$i ) { $this->_ThickCircle($dblImg,$xc,$yc,$rr*$i+$ri, $this->iCircGridWeight,$this->iGridColor1); } $num = 0 ; if( $this->iType == WINDROSE_TYPEFREE ) { $this->_StrokeFreeRose($dblImg,$value,$scaling,$xc,$yc,$r,$ri); } else { if( $this->iOrdinalEncoding == KEYENCODING_CLOCKWISE ) { if( $this->iType == WINDROSE_TYPE16 ) { $const1 = 19; $const2 = 16; } elseif( $this->iType == WINDROSE_TYPE8 ) { $const1 = 9; $const2 = 8; } else { $const1 = 4; $const2 = 4; } $tmp = array(); $n=count($this->iData); foreach( $this->iData as $key => $val ) { if( is_numeric($key) ) { $key = ($const1 - $key) % $const2 ; } $tmp[$key] = $val; } $this->iData = $tmp; } $this->_StrokeRegularRose($dblImg,$value,$scaling,$xc,$yc,$r,$ri); } $this->scale->iFontSize *= $scaling; $this->scale->iZFontSize *= $scaling; $this->scale->StrokeLabels($dblImg,$xc,$yc,$ri,$rr); $this->_ThickCircle($dblImg,$xc,$yc,$ri,$this->iCircGridWeight,$this->iGridColor1); $ww = $w / $scaling ; $hh = $h / $scaling ; if( $ww > $aImg->width ) { JpgraphError::RaiseL(22020); } $x = $xc; $y = $h; $this->_StrokeLegend($dblImg,$x,$y,$scaling); if( $this->iAntiAlias ) { $aImg->Copy($dblImg->img,$this->iX-$ww/2,$this->iY-$hh/2,0,0,$ww,$hh,$w,$h); } $aImg->SetTranslation(0,0); } } class WindroseGraph extends Graph { var $posx, $posy, $radius; var $legends=array(); var $plots=array(); function WindroseGraph($width=300,$height=200,$cachedName="",$timeout=0,$inline=1) { $this->Graph($width,$height,$cachedName,$timeout,$inline); $this->posx=$width/2; $this->posy=$height/2; $this->SetColor(array(255,255,255)); $this->title->SetFont(FF_VERDANA,FS_NORMAL,12); $this->title->SetMargin(8); $this->subtitle->SetFont(FF_VERDANA,FS_NORMAL,10); $this->subtitle->SetMargin(0); $this->subsubtitle->SetFont(FF_VERDANA,FS_NORMAL,8); $this->subsubtitle->SetMargin(0); } function StrokeTexts() { if( $this->texts != null ) { $n = count($this->texts); for($i=0; $i < $n; ++$i ) { $this->texts[$i]->Stroke($this->img); } } } function StrokeIcons() { if( $this->iIcons != null ) { $n = count($this->iIcons); for( $i=0; $i < $n; ++$i ) { $this->iIcons[$i]->_Stroke($this->img); } } } function Add(&$aObj) { if( is_array($aObj) && count($aObj) > 0 ) $cl = $aObj[0]; else $cl = $aObj; if( is_a($cl,'Text') ) $this->AddText($aObj); elseif( is_a($cl,'IconPlot') ) $this->AddIcon($aObj); elseif( !is_a($cl,'WindrosePlot') ) JpgraphError::RaiseL(22021); else $this->plots[] = &$aObj; } function AddText(&$aTxt) { parent::AddText($aTxt); } function SetColor($c) { $this->SetMarginColor($c); } function Stroke($aStrokeFileName="") { $_csim = ($aStrokeFileName===_CSIM_SPECIALFILE); $this->iHasStroked = true; $n = count($this->plots); if( $this->background_image != "" || $this->background_cflag != "" ) { $this->StrokeFrameBackground(); } else { $this->StrokeFrame(); } for($i=0; $i < $n ; ++$i) { $wp =& $this->plots[$i]; if( $wp->iX > 0 && $wp->iX < 1 ) $wp->iX = round( $this->img->width * $wp->iX ) ; if( $wp->iY > 0 && $wp->iY < 1 ) $wp->iY = round( $this->img->height * $wp->iY ) ; if( $wp->iSize > 0 && $wp->iSize < 1 ) $wp->iSize *= min($this->img->width,$this->img->height); if( $wp->iCenterSize > 0 && $wp->iCenterSize < 1 ) $wp->iCenterSize *= $wp->iSize; $wp->scale->AutoScale(($wp->iSize-$wp->iCenterSize)/2,round(2.5*$wp->scale->iFontSize)); $wp->Stroke($this->img); $wp->Legend($this); } $this->legend->Stroke($this->img); $this->footer->Stroke($this->img); $this->StrokeIcons(); $this->StrokeTitles(); $this->StrokeTexts(); if( $aStrokeFileName == _IMG_HANDLER ) { return $this->img->img; } else { $this->cache->PutAndStream($this->img,$this->cache_name,$this->inline, $aStrokeFileName); } } } ?>
